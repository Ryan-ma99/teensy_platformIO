# generated from rosidl_generator_py/resource/_idl.py.em
# with input from my_custom_message:msg/Pressure.idl
# generated code does not contain a copyright notice


# Import statements for member types

import builtins  # noqa: E402, I100

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_Pressure(type):
    """Metaclass of message 'Pressure'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('my_custom_message')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'my_custom_message.msg.Pressure')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__pressure
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__pressure
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__pressure
            cls._TYPE_SUPPORT = module.type_support_msg__msg__pressure
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__pressure

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class Pressure(metaclass=Metaclass_Pressure):
    """Message class 'Pressure'."""

    __slots__ = [
        '_s01',
        '_s02',
        '_s03',
        '_s04',
        '_s05',
        '_s06',
        '_s07',
        '_s08',
        '_s09',
        '_s10',
        '_s11',
        '_s12',
        '_s13',
        '_s14',
        '_s15',
        '_s16',
    ]

    _fields_and_field_types = {
        's01': 'uint16',
        's02': 'uint16',
        's03': 'uint16',
        's04': 'uint16',
        's05': 'uint16',
        's06': 'uint16',
        's07': 'uint16',
        's08': 'uint16',
        's09': 'uint16',
        's10': 'uint16',
        's11': 'uint16',
        's12': 'uint16',
        's13': 'uint16',
        's14': 'uint16',
        's15': 'uint16',
        's16': 'uint16',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.s01 = kwargs.get('s01', int())
        self.s02 = kwargs.get('s02', int())
        self.s03 = kwargs.get('s03', int())
        self.s04 = kwargs.get('s04', int())
        self.s05 = kwargs.get('s05', int())
        self.s06 = kwargs.get('s06', int())
        self.s07 = kwargs.get('s07', int())
        self.s08 = kwargs.get('s08', int())
        self.s09 = kwargs.get('s09', int())
        self.s10 = kwargs.get('s10', int())
        self.s11 = kwargs.get('s11', int())
        self.s12 = kwargs.get('s12', int())
        self.s13 = kwargs.get('s13', int())
        self.s14 = kwargs.get('s14', int())
        self.s15 = kwargs.get('s15', int())
        self.s16 = kwargs.get('s16', int())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.s01 != other.s01:
            return False
        if self.s02 != other.s02:
            return False
        if self.s03 != other.s03:
            return False
        if self.s04 != other.s04:
            return False
        if self.s05 != other.s05:
            return False
        if self.s06 != other.s06:
            return False
        if self.s07 != other.s07:
            return False
        if self.s08 != other.s08:
            return False
        if self.s09 != other.s09:
            return False
        if self.s10 != other.s10:
            return False
        if self.s11 != other.s11:
            return False
        if self.s12 != other.s12:
            return False
        if self.s13 != other.s13:
            return False
        if self.s14 != other.s14:
            return False
        if self.s15 != other.s15:
            return False
        if self.s16 != other.s16:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @builtins.property
    def s01(self):
        """Message field 's01'."""
        return self._s01

    @s01.setter
    def s01(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 's01' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 's01' field must be an unsigned integer in [0, 65535]"
        self._s01 = value

    @builtins.property
    def s02(self):
        """Message field 's02'."""
        return self._s02

    @s02.setter
    def s02(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 's02' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 's02' field must be an unsigned integer in [0, 65535]"
        self._s02 = value

    @builtins.property
    def s03(self):
        """Message field 's03'."""
        return self._s03

    @s03.setter
    def s03(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 's03' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 's03' field must be an unsigned integer in [0, 65535]"
        self._s03 = value

    @builtins.property
    def s04(self):
        """Message field 's04'."""
        return self._s04

    @s04.setter
    def s04(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 's04' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 's04' field must be an unsigned integer in [0, 65535]"
        self._s04 = value

    @builtins.property
    def s05(self):
        """Message field 's05'."""
        return self._s05

    @s05.setter
    def s05(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 's05' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 's05' field must be an unsigned integer in [0, 65535]"
        self._s05 = value

    @builtins.property
    def s06(self):
        """Message field 's06'."""
        return self._s06

    @s06.setter
    def s06(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 's06' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 's06' field must be an unsigned integer in [0, 65535]"
        self._s06 = value

    @builtins.property
    def s07(self):
        """Message field 's07'."""
        return self._s07

    @s07.setter
    def s07(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 's07' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 's07' field must be an unsigned integer in [0, 65535]"
        self._s07 = value

    @builtins.property
    def s08(self):
        """Message field 's08'."""
        return self._s08

    @s08.setter
    def s08(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 's08' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 's08' field must be an unsigned integer in [0, 65535]"
        self._s08 = value

    @builtins.property
    def s09(self):
        """Message field 's09'."""
        return self._s09

    @s09.setter
    def s09(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 's09' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 's09' field must be an unsigned integer in [0, 65535]"
        self._s09 = value

    @builtins.property
    def s10(self):
        """Message field 's10'."""
        return self._s10

    @s10.setter
    def s10(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 's10' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 's10' field must be an unsigned integer in [0, 65535]"
        self._s10 = value

    @builtins.property
    def s11(self):
        """Message field 's11'."""
        return self._s11

    @s11.setter
    def s11(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 's11' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 's11' field must be an unsigned integer in [0, 65535]"
        self._s11 = value

    @builtins.property
    def s12(self):
        """Message field 's12'."""
        return self._s12

    @s12.setter
    def s12(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 's12' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 's12' field must be an unsigned integer in [0, 65535]"
        self._s12 = value

    @builtins.property
    def s13(self):
        """Message field 's13'."""
        return self._s13

    @s13.setter
    def s13(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 's13' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 's13' field must be an unsigned integer in [0, 65535]"
        self._s13 = value

    @builtins.property
    def s14(self):
        """Message field 's14'."""
        return self._s14

    @s14.setter
    def s14(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 's14' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 's14' field must be an unsigned integer in [0, 65535]"
        self._s14 = value

    @builtins.property
    def s15(self):
        """Message field 's15'."""
        return self._s15

    @s15.setter
    def s15(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 's15' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 's15' field must be an unsigned integer in [0, 65535]"
        self._s15 = value

    @builtins.property
    def s16(self):
        """Message field 's16'."""
        return self._s16

    @s16.setter
    def s16(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 's16' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 's16' field must be an unsigned integer in [0, 65535]"
        self._s16 = value
